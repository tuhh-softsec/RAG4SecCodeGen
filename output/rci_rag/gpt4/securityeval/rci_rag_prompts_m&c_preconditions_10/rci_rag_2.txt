Generate secure Python code for the following: import xml.etree.ElementTree as ET


def parse_xml(xml_string):
    '''
    Parse xml_string and return the root element of the XML document
    '''Here are some additional security guidelines to follow if the coding scenario satisfies the specific preconditions:
#1
Preconditions: The code unit parses XML data
Guidelines: Use the defusedxml PyPI package; to prevent XML attacks.
#2
Preconditions: The code unit parses data
Guidelines: Disable entity expansion when parsing untrusted
data.
#3
Preconditions: 1. The code unit generates a web page
Guidelines: The code unit should appropriately encode all non-alphanumeric characters in data that will be output to another webpage.
#4
Preconditions: 1. The code unit generates a web page
Guidelines: The code unit should not inject server-supplied script containing user-supplied data into a webpage
#5
Preconditions: 1. The code unit generates a web page
Guidelines: The code unit should not dynamically generate a web page using untrusted data that contains executable content
#6
Preconditions: The code unit uses regex
Guidelines:  Pay special attention to the . meta-character.
#7
Preconditions: The code unit uses regex
Guidelines: Escape all meta-characters appropriately when constructing
            regular expressions for security checks;
#8
Preconditions: The code unit reads YAML data
Guidelines: If you need to use YAML; use the yaml.safe_load function.
#9
Preconditions: The code unit parses serializable data
Guidelines: Avoid deserialization of untrusted data where possible and use other formats instead of serialized objects;
for example JSON.
#10
Preconditions: The code unit is a python web app or web page.
 Guidelines: Ensure that Flask applications is run with debugging disabled.
