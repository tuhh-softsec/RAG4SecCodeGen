ID,Preconditions,Secure Coding Guidelines,ID,content
G1,The code unit reads serialized data,The code unit should validate the serialized data before deserializing them,CWE-502_1,The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.
G2,The code unit stores serialized data,The code unit should use cryptography signatures after serializing data,CWE-502_2,"deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption."
G3,The code unit reads serialized data,The code unit should validate the integrity of serialized data before deserializing them,CWE-502_2,"deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption."
G4,The code unit reads serialized data,The code unit should have restrictions on gadget chains before deserializing data,CWE-502_3,"When developers place no restrictions on ""gadget chains,"" or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell."
G5,The code unit reads serialized data,The code unit should populate a new instance when deserializing an object,CWE-502_5,"When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe."
G6,The code unit is the subclass of a serializable class that prevents subclasses to be deserialized,The code unit should not be deserialized,CWE-502_6,Explicitly define a final object() to prevent deserialization.
G7,The code unit is deserializable and has fields that should not be deserialized,The code unit should not deserialize protected fields,CWE-502_7,"Make fields transient to protect them from deserialization. An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly."
G8,The code unit is not meant to be deserialized,The code unit should avoid having unnecessary types or gadgets.,CWE-502_8.a,Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker.
G9,The code unit reads serialized data,The code unit should deserialize only acceptable classes,CWE-502_8.b,"Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation."
G10,The code unit reads serialized data,The code unit should verify whether the serialized data have been replaced,CWE-502_10,An attacker may be able to replace the intended file with a file that contains arbitrary malicious code which will be executed when the button is pressed.
G11,The code unit transmit authentication credentials,The code unit should prevent unauthorized access to transmitted credentials,CWE-522_1,"The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval."
G12,The code unit stores authentication credentials,The code unit should prevent unauthorized access to stored credentials,CWE-522_1,"The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval."
G13,The code unit involves authentication credentials,The code unit should write credentials only after encryption ,CWE-522_3,Make appropriate use of cryptography to protect the credentials.
G14,The code unit involves authentication credentials,"The code unit should protect credentials through industry standards (e.g. LDAP, keystore, etc.)",CWE-522_4,"Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.)."
G15,The code unit involves protected objects,The code unit should ensure the requesting user is authorized to access a protected object,CWE-522_5,"While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed."
G16,The code unit involves a configuration file with sensitive data,The code unit should protect the accesses to configuration files ,CWE-522_7,"anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system."
G17,The code unit involves a registry key with sensitive data,The code unit should protect the accesses to registry keys ,CWE-522_8,"anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system"
G18,The code unit stores passwords,The code unit should not store passwords with compression,CWE-522_9,"Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database."
G19,The configuration file contains sensitive data,Check if the configuration file does not store sensitive data in cleartext,CWE-522_10.a,Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource.
G20,The code unit dereferences a pointer,The code unit should ensure a pointer is not NULL before dereferencing it,CWE-476_1,The product dereferences a pointer that it expects to be valid but is NULL.
G21,The code unit receives data from an external source,The code unit should validate external data before assigning to variables or storing them,CWE-476_5,"Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values."
G22,N/A,The code unit should explicitly initialize all variables and data stores before first usage,CWE-476_6,"Explicitly initialize all variables and other data stores, either during declaration or just before the first usage."
G23,The code unit dereferences a pointer with multiple threads,The code unit should use proper locking APIs when using pointers,CWE-476_7,"When working with a multithreaded or otherwise asynchronous environment, ensure that proper locking APIs are used to lock before the if statement; and unlock when it has finished."
G24,The code unit accepts the upload or transfer of a file,The code unit should assign unique names to uploaded files,CWE-434_3,"Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all."
G25,The code unit accepts the upload or transfer of a file and the set of accetable files is known,The code unit should reject uploaded files not belonging to the known set of files,CWE-434_4,"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."
G26,The code unit accepts URLs and the set of accetable URLs is known,The code unit should reject given URLs not belonging to the known set of URLs,CWE-434_4,"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."
G27,The code unit accepts the upload or transfer of a file and store it in the local file system,The code unit should store the uploaded files outside of the web document root,CWE-434_5,"Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically ."
G28,The code unit accepts the upload or transfer of a file,The code unit should accept only uploaded files whose content conforms to specifications,CWE-434_6,"Assume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does."
G29,The code unit accepts the upload or transfer of a file,The code unit should use denylists to validate uploaded files,CWE-434_8,"Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
G30,The code unit accepts the upload or transfer of a file,The code unit should reject uploaded files with unintended extensions,CWE-434_9,"For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions."
G31,The code unit accepts the upload or transfer of a file,The code unit should ensure the uploaded file has only one extension,CWE-434_11,"Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that ""filename.php.gif"" is fed to the PHP interpreter."
G32,The code unit accepts the upload or transfer of a file and the web server supports case-insensitive filenames,The code unit should perform case-insensitive evaluations of the extension of uploaded files,CWE-434_12,"When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided."
G33,The code unit accepts the upload or transfer of a file,The code unit should validate both the content and metadata of uploaded files,CWE-434_13,"Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field."
G34,The code unit accepts the upload or transfer of a file and execute it,The code unit should execute the uploaded file with the lowest necessary privileges,CWE-434_15,Run your code using the lowest privileges that are required to accomplish the necessary tasks
G35,The code unit accepts the upload or transfer of a file and execute it,The code unit should create isolated account with limited privileges when executing uploaded files,CWE-434_16,"If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
G36,The code unit accepts the upload or transfer of a file and execute it,"The code unit should execute uploaded files in a sandbox enviroment (e.g., chroot jail)",CWE-434_17,"Run the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software."
G37,The code unit accepts the upload or transfer of a file,The code unit should not allow executing previously uploaded executable files with arbitrary input,CWE-434_18,"The problem with the above code is that there is no check regarding type of file being uploaded. Assuming that pictures/ is available in the web document root, an attacker could upload a file with the name: (attack code) malicious.php Since this filename ends in "".php"" it can be executed by the web server. In the contents of this uploaded file, the attacker could use: (attack code) Example Language: PHP <?php system($_GET['cmd']); ?> Once this file has been installed, the attacker can enter arbitrary commands to execute using a URL such as: (attack code) http://server.example.com/upload_dir/malicious.php?cmd=ls%20-l which runs the ""ls -l"" command - or any other type of command that the attacker wants to specify."
G38,The code unit accepts the upload or transfer of a file and execute it,The code unit should verify the type of files uploaded before executing them,CWE-434_19,This code does not perform a check on the type of the file being uploaded ( CWE-434). This could allow an attack er to upload any executable file or other file with malicious code.
G39,The code unit accepts the upload or transfer of a file and store it in the local file system,The code unit should disallow path elements in uploaded file names,CWE-434_20,"Additionally, the creation of the BufferedWriter object is subject to relative path trav ersal (CWE-23 ). Since the code does not check the filename that is provided in the header, an attacker can use ""../"" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS ( CWE-79 ), or system crash."
G40,The code unit uses dynamically allocated memory,The code unit should not reuse a memory area that has been freed,CWE-416_1,The product reuses or references memory after it has been freed.
G41,The code unit uses dynamically allocated memory,The code unit should not call a function via a pointer whose memory has been freed,CWE-416_2,"If malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-Confidentiality where primitive to execute arbitrary code. If the newly allocated data happens to hold a class, in C++ for example, various Availability function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved."
G42,The code unit uses dynamically allocated memory,The code unit should set a pointer to NULL once its memory has been freed,CWE-416_4,"When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy."
G43,The code unit allocates resources,The code unit should limit the number of allocated resources,CWE-400_1,"If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources."
G44,The code unit allocates resources,The code unit should limit the size of allocated resources,CWE-400_1,"If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources."
G45,The code unit allocates resources,The code unit should release a resource after its use,CWE-400_4,Not closing/returning a resource after processing
G46,The code unit allocates resources,The code unit should release resources on error conditions or other exceptional circumstances,CWE-400_5,Resource exhaustion problems are often result due to an incorrect implementation of the following situations: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for releasing the resource.
G47,The code unit allocates resources,The code unit should be able to release the resources for which it is responsible,CWE-400_5,Resource exhaustion problems are often result due to an incorrect implementation of the following situations: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for releasing the resource.
G48,The code unit allocates resources,The code unit should allow resource allocation only to authorized parties,CWE-400_7,A strong authentication and access control model will help prevent such attacks from occurring in the first place.
G49,The code unit reads data from a database,The code unit should cache the result set from a database access,CWE-400_9,"Limiting the database access, perhaps by caching result sets, can help minimize the resources expended."
G50,The code unit allows users to make some kind of requests,The code unit should prevent users making further requests if their limit has been exceeded,CWE-400_10,consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.
G51,The code unit allocates resources,The code unit should place the system into a safe posture in case of failures in resource allocation,CWE-400_14,Ensure that all failures in resource allocation place the system into a safe posture.
G52,The code unit allocates threads,The code unit should limit the numbers of threads that can be created,CWE-400_15,There are no limits to runnables. Potentially an attacker could cause resource problems very quickly.
G53,The code unit allocates connections,The code unit should limit the numbers of connections that can be made,CWE-400_16.a,"The program does not track how many connections have been made, and it does not limit the number of connections."
G54,The code unit dumps data into a file,The code unit should prevent files from growing without any limit,CWE-400_17,This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service.
G55,The code unit places external data into strings or character arrays,The code unit should limit the length of strings or character arrays,CWE-400_18,"This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length check"
G56,The code unit places external data into buffers,The code unit should limit the length of buffers,CWE-400_21,"This example creates a situation where the length of the body supplied can be very large and will consume excessive memory, exhausting system resources. This can be avoided by ensuring the body does not exceed a predetermined length of bytes."
G57,N/A,The code unit should require the right authentication level,CWE-306_1,"Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability."
G58,The code unit involves some communication channels,The code unit should not open a protected channel without requiring authentication,CWE-306_2,"Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected, including those channels that are assumed to be accessible only by authorized parties."
G59,The code unit involves multiple connections/channels within a single session,The code unit should perform authentication at every connection,CWE-306_4,"In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout."
G60,The code unit is server-side in a client-server application,The code unit should perform the same security checks made on the client side,CWE-306_5,"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to av oid CWE-602 ."
G61,The code unit is client-side in a client-server application,The code unit should not allow values to be modified after the security checks have been performed,CWE-306_6,"Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."
G62,The code unit is client-side in a client-server application,The code unit should not have its intended security checks removed,CWE-306_6,"Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."
G63,The code unit is web-based and have pages,The code unit should apply authentication before returning the requested page,CWE-306_8,"In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly."
G64,The code unit accesses data stored in the cloud,The code unit should require authentication when accessing cloud data,CWE-306_11,"When migrating data to the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), there is a risk of losing the Operation protections that were originally provided by hosting on internal networks. If access does not require authentication, it can be easier for attackers to access the data from anywhere on the Internet."
G65,The code unit's operation involves protected objects,The code unit should require authentication when requesting operations,CWE-306_12,"However, there is no authentication mechanism to ensure that the user creating this bank account object has the authority to create new bank accounts. Some authentication mechanisms should be used to verify that the user has the authority to create bank account objects."
G66,The code unit involves S3 buckets,The code unit should configure sensitive buckets for no public read access when created,CWE-306_14.a,"The sensitive information could have been protected by ensuring that the buckets did not have public read access, e.g., by enabling the s3-account-level-public-access-blocks-periodic rule to Block Public Access."
G67,The code unit involves S3 buckets,The code unit should configure sensitive buckets for encrypted data when created,CWE-306_14.b,"In addition, the data could have been encrypted at rest using the appropriate S3 settings, e.g., by enabling server-side encryption using the s3-bucket-server-side-encryption-enabled setting. Other settings are available to further prevent bucket data from being leaked."
G68,1. The code unit handles resources and actions that need to be protected.,The code unit should perform an authorization check when an actor attempts to access a resource or perform an action,CWE-863_1,The product does not perform an authorization check when an actor attempts to access a resource or perform an action.
G69,1. The code unit handles resources and actions that need to be protected.,The code unit should include or reference a mapping of roles with accessible data and functionality,CWE-863_3,Reduce the attack surface by carefully mapping roles with data and functionality.
G70,"1. The code unit handles resources and actions that need to be protected.
2. The code unit handles access control
3. The code unit has defined boundaries",The code unit should use role-based access control (RBAC) to enforce the roles at the appropriate boundaries,CWE-863_4,Use role-based access control (RBAC) [ REF-229] to enforce the roles at the appropriate boundaries.
G71,"1. The code unit handles resources and actions that need to be protected.
2. The code unit handles access control
3. Business logic is available",The code unit should perform access controls related to the business logic,CWE-863_5,Ensure that access control checks are performed related to the business logic.
G72,1. The code unit handles resources and actions that need to be protected.,The code unit should use a vetted library or framework that prevents missing authorization weakness such as JAAS authorization and OWASP ESAPI Access Control feature,CWE-863_6,"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233 ] and the OWASP ESAPI Access Control feature [ REF-45]."
G73,"1. The code unit handles resources and actions that need to be protected.
2. The code unit is a web application with server side",The code unit should enforce access control mechanism at the server side ,CWE-863_7,"For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page."
G74,"1. The code unit handles resources and actions that need to be protected.
2. The code unit is a web application",The code unit should provide access to functionalities or information to unauthorized users requesting direct access to the page,CWE-863_8,Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
G75,"1. The code unit handles resources and actions that need to be protected.
2. The code unit is a web application containing sensitive information",The code unit should not cache pages containing sensitive information,CWE-863_9,"One way to do this is to ensure that all pages containing sensitive information are not cached,"
G76,"1. The code unit handles resources and actions that need to be protected.
2. The code unit is a web application containing sensitive information",The code unit should restrict the access to pages containing sensitive information to authorized users with active and authenticates session token.,CWE-863_10,that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.
G77,1. The code unit handles resources and actions that need to be protected.,The code unit should include or references a mapping of roles with accessible data and functionality,CWE-862_3,Reduce the attack surface by carefully mapping roles with data and functionality.
G78,"1. The code unit handles resources and actions that need to be protected.
2. The code unit is a web application",The code unit should not provide access to functionalities or information to unauthorized users requesting direct access to the page,CWE-862_8,Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
G79,1. The code unit handles sensitive information,"The code unit should store sensitive information (passwords, keys, credentials etc.) in a strongly protected encrypted configuration file or database with restricted access",CWE-798-1,"For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system."
G80,1. The code unit handles files with sensitive information,The code unit should restrict the permissions to files that cannot encrypted,CWE-798-3.a,"If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible"
G81,1. The code unit handles user logins,"The code unit should utilize a ""first login"" mode that requires the user to enter a unique strong password or key rather than hardcode default credentials for first time logins",CWE-798-4,"For inbound authentication: Rather than hardcode a default username and password, key, or other authentication credentials for first time logins, utilize a ""first login"" mode that requires the user to enter a unique strong password or key."
G82,1. The code unit includes features controlled by hard-coded credentials,The code unit should perform access control checks and limit which entities can access the feature that requires the hardcoded credentials,CWE-798-5,"If the product must contain hardcoded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hardcoded credentials"
G83,1. The code unit handles sensitive information,The code unit should apply strong one-way hashes to the passwords,CWE-798-6,For inbound authentication using passwords: apply strong one-way hashes to passwords 
G84,1. The code unit handles authentication,The code unit should compare the hash of an incoming password to a saved hash during authentication,CWE-798-7.b,"When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash."
G85,1. The code unit generates hashes,The code unit should randomly assign salts for each separate hash that is generated,CWE-798-8,Use randomly assigned salts for each separate hash that is generated.
G86,1. The code unit generates passwords or keys,The code unit should use generated passwords or keys that are automatically updated and require input by a system administrator at specified time intervals.,CWE-798-9.a,"For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. "
G87,1. The code unit handles temporary passwords,"The code unit should keep temporary passwords in the memory for the specific time interval, beyond which the passwords becomes invalid",CWE-798-9.b,These passwords will be held in memory and only be valid for the time intervals. 
G88,"1. The code unit works with backend and front end
2. The code unit handles passwords or keys",The code unit should limit the backend passwords or keys to only perform actions valid for the front end instead of having full access,CWE-798-9.c,"For front-end to back-end connections: Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. "
G89,1. The code unit handles messages sent using time sensitive values,The code unit should tag and checksum the messages sent using time sensitive values to prevent replay-style attacks,CWE-798-9.d,"For front-end to back-end connections: Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."
G90,1. The code unit handles sentsitive information,The code unit should encrypt the username and passwords information,CWE-798-10.b,"If possible, encrypt this information (username and password information)."
G91,"1. The code unit handles concurrent, parallel or multithreaded programming that involves resource sharing
2. The programming language supports synchronisation primitives",The code unit should wrap critical code using synchronization primitives,CWE-362_1,"In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance."
G92,"1. The code unit handles concurrent, parallel or multithreaded programming that involves resource sharing
2. The programming language supports synchronisation primitives",The code unit should use thread-safe capabilities,CWE-362_2,Use thread-safe capabilities such as the data access abstraction in Spring.
G93,"1. The code unit handles concurrent, parallel or multithreaded programming that involves resource sharing
2. The programming language supports synchronisation primitives",The code unit should use thread-safe functions when using multithreading or performing operations on shared variables.,CWE-362_4,"When using multithreading and operating on shared variables, only use thread-safe functions."
G94,"1. The code unit handles concurrent, parallel or multithreaded programming that involves resource sharing
2. The programming language supports synchronisation primitives",The code unit should perform non-atomic operations on shared variables,CWE-362_5,"Use atomic operations on shared variables. Be wary of innocent-looking constructs such as ""x++""."
G95,"1. The code unit handles concurrent, parallel or multithreaded programming that involves resource sharing
2. The programming language supports synchronisation primitives",The code unit should use mutex for shared variables or resources,CWE-362_6,"Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412."
G96,"1. The code unit handles concurrent, parallel or multithreaded programming that involves resource sharing
2. The programming language supports synchronisation primitives",The code unit should avoid double-checked locking,CWE-362_7,Avoid double-checked locking ( CWE-609 ) and other implementation errors that arise when trying to avoid the overhead of synchronization.
G97,"1. The code unit handles concurrent, parallel or multithreaded programming that involves resource sharing
2. The programming language supports synchronisation primitives",The code unit should disable interrupts or signals over critical parts of the code ,CWE-362_8,"Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop."
G98,"1. The code unit handles concurrent, parallel or multithreaded programming that involves resource sharing
2. The programming language supports synchronisation primitives",The code unit should use volatile type modifier for critical variables,CWE-362_9,Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering.
G99,"1. The code unit handles concurrent, parallel or multithreaded programming that involves resource sharing
2. The programming language supports synchronisation primitives",The code unit should use lowest privileges that are necessary for performing tasks involving resource sharing,CWE-362_10,Run your code using the lowest privileges that are required to accomplish the necessary tasks
G100,1. The code unit handles HTTP requests from external actors,The code unit should sufficiently verify whether a request was intentionally provided by the user who submitted the request.,CWE-352_1,"The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."
G101,1. The code unit handles HTTP requests from external actors,The code unit should use vetted library or framework that does not allow CSRF ,CWE-352_3.a,Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. 
G102,1. The code unit handles HTTP requests from external actors,The code unit should prevent XSS attacks,CWE-352_4,"Ensure that the application is free of cross-site scripting issues ( CWE-79 ), because most CSRF defenses can be bypassed using attacker-controlled script."
G103,1. The code unit handles HTTP requests from external actors,The code unit should use a unique and unpredictable nonce to verify a submitted form,CWE-352_5,"Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable"
G104,"1. The code unit handles HTTP requests from external actors
2. The HTTP request performs a dangerous action",The code unit should send a separate confirmation request to ensure that the user intended to perform an operation that is deemed dangerous,CWE-352_6,"Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation."
G105,1. The code unit handles HTTP POST requests from external actors,The code unit should generate a pseudorandom value and set it as a cookie on the user's machine. ,CWE-352_8.a,"When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. "
G106,1. The code unit handles HTTP POST requests from external actors,The code unit should verify if the pseudorandom value is present as a form value and a cookie value,CWE-352_8.b,The site should require every form submission to include this value as a form value and also as a cookie value. 
G107,1. The code unit handles HTTP requests from external actors,The code unit should generate cryptographically strong pseudorandom value as cookie,CWE-352_9,"To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult."
G108,1. The code unit handles HTTP requests from external actors,The code unit should not use GET method for any request that triggers a state change,CWE-352_10,Do not use the GET method for any request that triggers a state change.
G109,1. The code unit handles HTTP requests from external actors,The code unit should verify the origin page of the request by checking the HTTP Referer header,CWE-352_11,Check the HTTP Referer header to see if the request originated from an expected page.
G110,1. The code unit handles actions performed by an actor,The code unit should verify the identity of an actor,CWE-287_1,"When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct"
G111,1. The code unit set resource permissions,The code unit should not assign persmissions that allow anyone to modify the files,CWE-276_1,"During installation, installed file permissions are set to allow anyone to modify those files."
G112,1. The code unit set resource permissions,The code unit should restrict access and modification rights to only those users who require those actions,CWE-276_2,The architecture needs to access and modification attributes for files to only those users who actually require those actions.
G113,"1. The code unit handles sensitive data
2. The code unit has a trust boundary",The code unit should not allow sensitive data to go outside of the trust boundary.,CWE-276_4.a,Do not allow sensitive data to go outside of the trust boundary
G114,1. The code unit handles user privilege assignment,The code unit should follow the principle of least privilege when assigning access rights to entities in a software system.,CWE-276_6,Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.
G115,1. The code unit handles user privilege assignment,The code unit should properly assign or modify the privileges of an actor.,CWE-269_1.a,"The product does not properly assign or modify privileges for an actor, creating an unintended sphere of control for that actor"
G116,1. The code unit handles handles actions that require user privileges,The code unit should properly track or check privileges for an actor,CWE-269_1.b,"The product does not properly track, or check privileges for an actor, creating an unintended sphere of control for that actor"
G117,1. The code unit has trust zones,The code unit should explicitly manage trust zones in the software,CWE-269_2.b,Explicitly manage trust zones in the software.
G118,1. The code unit handles resource privilege assignment,The code unit should follow the principle of separation of privileges.,CWE-269_4,Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.
G119,1. The code unit sends the sensitive information into another source,The code unit should not explicitly insert sensitive information into resources or messages accessible to unauthorized actors,CWE-200_1,"the code explicitly inserts sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been ""scrubbed"" or ""sanitized"""
G120,1. The code unit sends the sensitive information into another source,The code unit should not let another weakness or code error indirectly inserts sensitive information into resources or messages accessible to unauthorized actors,CWE-200_2,"different weakness or mistake indirectly inserts the sensitive information into resources, such as a web script error revealing the full system path of the program."
G121,1. The code unit handles sensitive resources,The code unit should not make sensitive resources accessible to unauthorized users,CWE-200_3,"the code manages resources that intentionally contain sensitive information, but the resources are unintentionally made accessible to unauthorized actors."
G122,1. The code unit handles sensitive resources,The code unit should be compartmentalized to have safe areas with trust boundaries,CWE-200_4,"Compartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn"
G123,1. The code unit handles sensitive resources,The code unit should prevent sensitive data to go out side of the trust boundary,CWE-200_5,Do not allow sensitive data to go outside of the trust boundary
G124,1. The code unit handles sensitive resources,The code unit should implement the principle of least privilege on sensitive resources,CWE-200_6,Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges
G125,1. The code unit handles integer operations,The code unit should define strict protocols to identify out-of-bounds behavior,CWE-190_1,"Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol."
G126,1. The code unit handles integer operations,The code unit should use vetted library or framework that prevents out-ouf-bounds weakness,CWE-190_2,Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid
G127,"1. The code unit accepts numeric inputs from external components such as users, modules etc.",The code unit should perform input validation on all numeric inputs to ensure that they are within the expected range,CWE-190_4,Perform input validation on any numeric input by ensuring that it is within the expected range.
G128,1. The code unit handles integer operations,The code unit should use unsigned integers where possible,CWE-190_6,Use unsigned integers where possible.
G129,1. The code unit handles signed integer operations,The code unit should verify if the signed integers meets both minimum and maximum requirements for the expected range,CWE-190_7,"When signed integers are required, ensure that the range check includes minimum values as well as maximum values."
G130,1. The code unit handles client side and server side,The code unit should duplicate the client side security checks on the server side.,CWE-190_8,"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side,"
G131,1. The code unit handles client side and server side,The code unit should prevent the submission of modified filepaths to the server after manually disabling or bypassing client-side validation checks,CWE-190_9,"Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."
G132,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should use an accept list to verify acceptable inputs,CWE-125_1,"Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications."
G133,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should verify the expected specifications of every input,CWE-125_2,"Reject any input that does not strictly conform to specifications, or transform it into something that does."
G134,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should validate the input length,CWE-125_3.a,"When performing input validation, consider all potentially relevant properties, including length, "
G135,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should validate the input type,CWE-125_3.b,"type of input,"
G136,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should validate the input to be in the range of acceptable values,CWE-125_3.c,the full range of acceptable values
G137,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should verify if there are any misssing or extra inputs,CWE-125_3.d,", missing or extra inputs"
G138,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit accepts inputs that require syntax or format validation",The code unit should validate the syntax of the input,CWE-125_3.e,", syntax, "
G139,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit contains related input fields",The code unit should validate the consistency of data entered across related input fields.,CWE-125_3.f,"consistency across related fields,"
G140,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. There are business rules that the input should statisfy",The code unit should validate the input conformance to business rules ,CWE-125_3.g,and conformance to business rules
G141,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should contain a denylist for the inputs,CWE-125_4,denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
G142,The code unit performs arithmetic calculations based on buffers,"The code unit should validate correct calculations for any length argument, buffer size calculation or offset",CWE-125_5,"ensure that you validate and ensure correct calculations for any length argument, buffer size calculation, or offset."
G143,"
2. The code unit handles buffer operations",The code unit should use vetted library or framework that prevents improper operations within the bounds of a memory buffer,CWE-119_1,Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
G144,"
2. The code unit handles buffer operations",The code unit should verify if the buffer is as large as specified,CWE-119_3,Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified.
G145,"
2. The code unit handles buffer operations",The code unit should verify if the destination buffer size is equal to the source buffer size when copying content.,CWE-119_4,"When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string."
G146,"
2. The code unit handles buffer operations",The code unit should verify the buffer boundaries when accessing buffer in a loop.,CWE-119_5,Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.
G147,"
2. The code unit handles buffer operations",The code unit should truncate all input strings to a reasonable length before passing them to copy and concatenation function,CWE-119_6,"If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions."
G148,"
2. The code unit handles buffer operations",The code unit should use unbounded copy functions that do not support length arguments,CWE-119_9,"Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy."
G149,"1. The code unit contains SQL statements
2. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should quote all input fields,CWE-89_23.a,attackers can: Target fields that are not quoted 
G150,"1. The code unit contains SQL statements
2. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should escape all meta-characters properly,CWE-89_23.b,Find ways to bypass the need for certain escaped meta-characters 
G151,"1. The code unit contains SQL statements
2. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
3. The code unit implements stored procedure","The code unit should implement stored procedure correctly:
- the stored procedure should avoid dynamic SQL queries
- the stored procedure should use parameterized queries",CWE-89_23.c,"Use stored procedures to hide the injected meta-characters. Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks."
G152,"1. The code unit contains SQL statements
2. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should separate user provided data and executable commands in code,CWE-89_1,"If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated."
G153,"1. The code unit contains SQL statements
2. The code unit accepts inputs from an external component (e.g., user, other module, etc.)","The code unit should use prepared statements, parameterized queries or stored procedures for processing SQL queries",CWE-89_2,"Process SQL queries using prepared statements, parameterized queries, or stored procedures"
G154,"1. The code unit contains SQL statements
2. The code unit accepts inputs from an external component (e.g., user, other module, etc.)","The code unit should not dynamically construct and execute query strings using ""exec"" or similar functionality.",CWE-89_4,"Do not dynamically construct and execute query strings within these features using ""exec"" or similar functionality, since this may re-introduce the possibility of SQL injection"
G155,"1.  The code unit handles SQL database operations
2. The code unit creates user accounts to a SQL database",The code unit should follow the principle of least privilege when creating user accounts to a SQL database,CWE-89_5,follow the principle of least privilege when creating user accounts to a SQL database.
G156,"1. The code unit handles SQL database operations
2. The code unit handles user accounts with read/write privilege",The code unit should limit the user privileges such that the users with read/write privileges cannot read/write others' data,CWE-89_6.b,"If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. "
G157,"1. The code unit handles SQL database operations
",The code unit should use the strictest permissions possible on all database objects.,CWE-89_6.c,"Use the strictest permissions possible on all database objects, such as execute-only for stored procedures."
G158,1. The code unit has a client side and server side,The code unit should perform same security checks on both client and server side.,CWE-89_7,"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side,"
G159,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should escape or filter all characters that do not pass an extremely strict allowlist.,CWE-89_9.a,The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). 
G160,"1. The code unit contains SQL statements
2. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should wrap arguments in quotes after the escaping/filtering step when handling special characters,CWE-89_9.b,"If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step."
G161,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should use an accept list to verify acceptable inputs,CWE-89_11.a,"Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. "
G162,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should not accept any input that does not conform to specifications,CWE-89_11.b,"Reject any input that does not strictly conform to specifications, "
G163,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should transform all input that does not conform to specifications into something that does,CWE-89_11.c,or transform it into something that does.
G164,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should validate the input length,CWE-89_12.a,"When performing input validation, consider all potentially relevant properties, including length, "
G165,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should validate the input type,CWE-89_12.b,"type of input,"
G166,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should validate the input to be in the range of acceptable values,CWE-89_12.c,the full range of acceptable values
G167,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should verify if there are any misssing or extra inputs,CWE-89_12.d,", missing or extra inputs"
G168,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should validate the syntax of the input,CWE-89_12.e,", syntax, "
G169,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should validate the input consistency across related fields ,CWE-89_12.f,"consistency across related fields,"
G170,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should contain a denylist for the inputs,CWE-89_13,denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright
G171,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should use stringent allowlists that limit the character set based on the expected value of the parameter in the request,CWE-89_14,"When constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request"
G172,"1. The code unit contains SQL statements
2. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should perform proper output encoding,CWE-89_15.a,"Note that proper output encoding,"
G173,"1. The code unit contains SQL statements
2. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should perform output escaping ,CWE-89_15.b," escaping, "
G174,"1. The code unit contains SQL statements
2. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should perform output quoting,CWE-89_15.c,"and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth."
G175,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. A list of expected or acceptable input values are provided",The code unit should use a mapping from a set of fixed expected input values to the actual inputs when the acceptable inputs are known,CWE-89_17,"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."
G176,1. The code unit prints error messages,The code unit should not provide unnecessary details in the error messages,CWE-89_18,Ensure that error messages only contain minimal details that are useful to the intended audience and no one else.
G177,1. The code creates or write to log files,The code unit should not save highly sensitive information to the log files,CWE-89_19,Highly sensitive information such as passwords should never be saved to log files.
G178,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. It is feasible to disallow meta-characters",The code unit should disallow meta-characters entirely when feasible,CWE-89_16,"When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth"
G179,1. The code unit handles web requests,The code unit should not accept untrusted data as input from a web request,cwe-79_1.a,"Cross-site scripting (XSS) vulnerabilities occur when: 1. Untrusted data enters a web application, typically from a web request. "
G180,1. The code unit generates a web page,The code unit should not dynamically generate a web page using untrusted data that contains executable content,cwe-79_1.b,"2. The web application dynamically generates a web page that contains this untrusted data.  3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. "
G181,1. The code unit handles HTTP request and responses,The code unit should not read data directly from the HTTP request and reflects it back in the HTTP response,cwe-79_2,The server reads data directly from the HTTP request and reflects it back in the HTTP response.
G182,1. The code unit generates a web page,The code unit should not inject server-supplied script containing user-supplied data into a webpage,cwe-79_4,"DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible"
G183,1. The code unit generates a web page,The code unit should appropriately encode all non-alphanumeric characters in data that will be output to another webpage.,cwe-79_5,"For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters."
G184,1. The code unit generates output,The code unit should specify the correct output encoding that needs to be used,cwe-79_6,"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8."
G185,1. The code unit handles HTTP requests,The code unit should specify encoding in the HTTP header,cwe-79_7,"If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
G186,1. The code unit handles HTTP requests,The code unit should set the session cookie to HttpOnly,cwe-79_8,"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly"
G187,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should use a list of acceptable inputs that strictly conform to specifications,cwe-79_9.a,"Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. "
G188,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should reject any input that does not strictly conform to specifications or transform it to something that does,cwe-79_9.b,"Reject any input that does not strictly conform to specifications, or transform it into something that does."
G189,1. The code unit handles HTTP requests,The code unit should use stringent allowlist that limit the character set based on the expected value of the request parameter while dynamically constructing webpages,cwe-79_11.a,"When dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. "
G190,1. The code unit handles HTTP requests,"The code unit should validate the data in the request including hidden fields, cookies, headers, the URL itself, and so forth. ",cwe-79_11.c,"but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth."
G191,1. The code unit generates output,"The code unit should perform proper output encoding, escaping, and quoting",cwe-79_12,"proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth."
G192,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit has interfaces",The code unit should perform input validation at well-defined interfaces in the application,cwe-79_13,Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
G193,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should use a mapping from a set of fixed expected input values to the actual inputs when the acceptable inputs are known,cwe-79_14,"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."
G194,1. The code unit constructs OS commands using external inputs,The code unit should construct an OS command using externally-influenced input from a component whose special elements are not correctly neutralized.,CWE-78_1,"The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component."
G195,1. It is possible to use library calls instead of external processes to perform a desired functionality,The code unit should use appropriate library calls to implement the desired functionality instead of relying on external processes.,CWE-78_2,"If at all possible, use library calls rather than external processes to recreate the desired functionality."
G196,1. The code unit executes OS commands,"The code unit should execute OS commands in a sandbox environtment such as chroot Jail, AppArmor etc.",CWE-78_3,"Run the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software."
G197,1. The code unit executes OS commands,The code unit should keep the data used to generate an executable command out of external control,CWE-78_4.a,"For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible."
G198,"1. The code unit is a web application
2. The code unit generates executable commands using some data",The code unit should store data used for command generation locally in the session's state instead of sending it out to the client in a hidden form field.,CWE-78_4.b,"For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field."
G199,1. The code unit executes OS commands,The code unit should use vetted library or framework that prevents OS command injection weakness,CWE-78_6,Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
G200,1. The code unit executes OS commands,The code unit should properly quote and escape the special characters in the arguments used for command construction,CWE-78_7,Properly quote arguments and escape any special characters within those arguments.
G201,1. The code unit constructs OS commands using external inputs,The code unit should keep a strict allowlist for characters present in the arguments used for command construction,CWE-78_8,The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). I
G202,1. The code unit constructs OS commands using external inputs,The code unit should escape or filters all the characters that do not pass an extremely strict allowlist of characters,CWE-78_8,The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). I
G203,1. It is possible to take input arguments via standard input and an input file,The code unit should restrict taking input arguments via command line if inputs can be provied via an input file or from standard input,CWE-78_9,"If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line."
G204,"1. The code unit constructs OS commands using external inputs
2. Structured mechanisms that enable separatio between code and data are available",The code unit should use structured mechanisms that automatically enforce separation between data and code,CWE-78_10,"If available, use structured mechanisms that automatically enforce the separation between data and code."
G205,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should transform all input that does not conform to expected specifications into something that does,CWE-78_12.b,or transform it into something that does.
G206,1. The code unit constructs OS commands using external inputs,The code unit should use stringent allowlist of characters in the paramater in a request,CWE-78_15,"When constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request."
G207,1. The code unit has a known list of acceptable objects such as filenames or URLs,The code unit should reject objects such as filenames or URLs not belonging to the known set of objects,CWE-78_17,"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."
G208,1. The code unit displays error messages,The code unit should not include unnecessary details in the error messages,CWE-78_18,Ensure that error messages only contain minimal details that are useful to the intended audience and no one else.
G209,1. The code unit displays error messages,The code unit should records the detailed error messages as log messages with restricted access,CWE-78_19.a,"If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files."
G210,1. The code unit stores sensitive information,The code unit should not save highly senstive information such as passwords to log files,CWE-78_19.b,Highly sensitive information such as passwords should never be saved to log files.
G211,1. The code unit displays messages,The code unit should not display inconsistent messages about sensitive information such as the internal state of the system,CWE-78_20,"Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not."
G212,1. The code unit handles OS command execution,The code unit should use an allowlist of allowable commands and reject the ones that do not belong to this list,CWE-78_21,"Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this"
G213,"1. The code unit is written in PHP
",The code unit should not use register_globals in PHP,CWE-78_23,"When using PHP, configure the application so that it does not use register_globals."
G214,1. The code unit constructs commands using external inputs,The code unit should not construct a command using externally-influenced input from a component whose special elements are not correctly neutralized.,CWE-77_1,"The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component"
G215,1. The code unit executes external commands,The code unit should execute external commands that only created statically,CWE-77_2,"If possible, ensure that all external commands called from the program are statically created."
G216,"1. The code unit accepts filenames or paths as inputs from an external component (e.g., user, other module etc.)",The code unit should contain stringent allowlist that limit the character set to be used for validating filenames,CWE-22_5,"When validating filenames, use stringent allowlists that limit the character set to be used."
G217,"1. The code unit accepts filenames or paths as inputs from an external component (e.g., user, other module etc.)
2. It is feasible to restrict the directory separators such as ""/"" and characters such as "".""","The code unit should restrict the filename to have only a single ""."" character and exclude directory separators such as ""/"", if possible",CWE-22_6,"If feasible, only allow a single ""."" character in the filename to av oid weaknesses such as CWE-23 , and exclude directory separators such as ""/"" to av oid CWE-36."
G218,"1. The code unit accepts filenames or paths as inputs from an external component (e.g., user, other module etc.)",Check if the code use a list of allowable file extensions,CWE-22_7,"Use a list of allow able file extensions, which will help to av oid CWE-434 ."
G219,1. The code unit handles client side and server side,Check if the code duplicates the client side security checks on the server side.,CWE-22_8,"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side,"
G220,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should decode and canonicalize the input to the application's current internal representation before validating it.,CWE-22_10,Inputs should be decoded and canonicalized to the application's current internal representation before being v alidated
G221,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit accepts inputs that need to be decoded",The code unit should not decode the same input twice.,CWE-22_11,Make sure that the application does not decode the same input twice
G222,"1. The code unit accepts filenames or paths as inputs from an external component (e.g., user, other module etc.)","The code unit should use a built-in path canonicalization function to remove "".."" sequences and symbolic links.",CWE-22_12,"Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes "".."" sequences and symbolic links"
G223,1. The code unit handles tasks with access control.,The code unit should use the lowest privileges to accomplish the necessary tasks,CWE-22_15,Run your code using the lowest privileges that are required to accomplish the necessary tasks
G224,"1. The code unit handles tasks with access control.
",The code unit should create isolated accounts with limited privileges per task.,CWE-22_16,"If possible, create isolated accounts with limited privileges that are only used for a single task."
G225,"1. The code unit accepts filenames or paths as inputs from an external component (e.g., user, other module etc.)","The code unit should be run in ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system",CWE-22_18,"Run the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system."
G226,"1. The code handles web-based services
2. The code unit stores library, include or utility files","The code unit should store library, include, and utility files outside of the web document root or in a separate directory and ensure strict access control to the web server",CWE-22_20,"Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them."
G227,1. The code unit displays error messages,The code unit should restrict the information displayed in the error messages,CWE-22_21,Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error.
G228,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should accept unexpected values as inputs.,CWE-20_9,"An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU."
G229,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The input properties are being used in the code",Check if the properties of input are correctly derived in the code unit,CWE-20_8,"Errors in deriving properties may be considered a contributing factor to improper input validation. (Context: properties include properties of raw data and meta data that include size, length, frequency, rate and so on.)"
G230,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should filter the input to remove dangerous inputs,CWE-20_2,such as filtering ( CWE-790) - which attempts to remove dangerous inputs
G231,"The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should encode and escape the input,CWE-20_3,"or encoding/escaping ( CWE-116 ), which attempts to ensure that the input is not misinterpreted when it is included in output to another component."
G232,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit combines data from multiple sources",The code unit should perform validation after combining data from multiple sources.,CWE-20_14,"When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined."
G233,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit invokes code from another language",The code unit should validate inputs when invoking code from another language,CWE-20_15,"validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. Consequence:This could create an unexpected interaction between the language boundaries"
G234,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should convert all inputs into the expected data type,CWE-20_16.a,"Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. "
G235,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should verify if the inputs value falls in the expected range of values after conversion.,CWE-20_16.b,"After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained"
G236,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit accepts inputs that need to be decoded",The code unit should decode the input to the application's current internal representation before validating it.,CWE-20_17.a,"Inputs should be decoded to the application's current internal representation before being v alidated (CWE-180 , CWE-181 ). "
G237,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should canonicalize the input to the application's current internal representation before validating it.,CWE-20_17.b,"Input should be canonicalized to the application's current internal representation before being v alidated (CWE-180 , CWE-181 )."
G238,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should perform repeated canonicalization until the input does not change.,CWE-20_19,"Consider performing repeated canonicalization until your input does not change any more. Reason: This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content"
G239,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit exchanges data between different components",The code unit should perform correct and consistent encoding at each interface while exchanging data between components,CWE-20_20.b,Ensure that the proper encoding is applied at each interface. 
G240,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)",The code unit should explicitly set the required encoding whenever possible.,CWE-20_20.c,Explicitly set the encoding you are using whenever the protocol allows you to do so.
G241,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit converts the inputs into tokens",The code unit should verify if the input tokens are in compliance with the rules of the specified or derived  types,CWE-20_6.b,- compliance with rules for what is treated as a token specified or derived type 
G242,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. A set of domain specific rules are provided",The code unit should verify if the input conforms to the domain-specific rules,CWE-20_6.d,"conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same"
G243,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. Authenticity and ownership are relevant to the input","The code unit should verify the authenticity, ownership or other attestations about the input.",CWE-20_7,"authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself."
G244,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit uses the metadata of the provided input","The code unit should validate metadata (such as information about the raw data, such as headers or size)",CWE-20_4.b,"metadata - information about the raw data, such as headers or size"
G245,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
","The code unit should validate the implied and derived quantities of the input data (such as such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc.)",CWE-20_5.b,"implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc."
G246,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit uses the metadata of the provided input","The code unit should validate the specified properties of the metadata (such as size, length, etc. )",CWE-20_5.c,"Many properties of metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. "
G247,"1. The code unit accepts inputs from an external component (e.g., user, other module, etc.)
2. The code unit uses the metadata of the provided input","The code unit should validate the implied and derived quantities of the metadata (such as such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc.)",CWE-20_5.d,"implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc."